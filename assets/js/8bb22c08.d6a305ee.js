"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[347],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(t),p=a,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||o;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5296:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={title:"\u9009\u9879\u548c\u53c2\u6570"},s=void 0,c={unversionedId:"docs/getting-started/grid-options",id:"docs/getting-started/grid-options",isDocsHomePage:!1,title:"\u9009\u9879\u548c\u53c2\u6570",description:"\u7f51\u683c\u9009\u9879",source:"@site/docs/docs/getting-started/02-grid-options.mdx",sourceDirName:"docs/getting-started",slug:"/docs/getting-started/grid-options",permalink:"/docs/docs/getting-started/grid-options",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/docs/getting-started/02-grid-options.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u9009\u9879\u548c\u53c2\u6570"},sidebar:"docs",previous:{title:"\u5feb\u901f\u5f00\u59cb",permalink:"/docs/docs/getting-started/qucik-start"},next:{title:"\u4ea4\u4e92",permalink:"/docs/docs/getting-started/interactive"}},u=[{value:"\u7f51\u683c\u9009\u9879",id:"\u7f51\u683c\u9009\u9879",children:[]},{value:"\u5217\u5b9a\u4e49",id:"\u5217\u5b9a\u4e49",children:[]},{value:"\u5217\u5206\u7ec4\u9009\u9879",id:"\u5217\u5206\u7ec4\u9009\u9879",children:[]},{value:"\u5217\u9009\u9879",id:"\u5217\u9009\u9879",children:[]},{value:"RowData",id:"rowdata",children:[]},{value:"GetColumnMenuItemsParams",id:"getcolumnmenuitemsparams",children:[]},{value:"GetContextMenuItemsParams",id:"getcontextmenuitemsparams",children:[]},{value:"MenuItem",id:"menuitem",children:[]}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u7f51\u683c\u9009\u9879"},"\u7f51\u683c\u9009\u9879"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface GridOptions {\n    // grid width, default is 100%\n    width?: string;\n    // grid height, default is 100%\n    height?: string;\n    // array of Column Definitions.\n    columns: ColumnsDef;\n    // a default column definition.\n    defaultColumnOption?: BaseColumnOptions;\n    // callback called when a column menu icon is clicked.\n    getColumnMenuItems?: (params: GetColumnMenuItemsParams) => MenuItem[] | undefined;\n    // default grid data\n    rows: RowData[];\n    // default column height, default is 30\n    headerHeight?: number;\n    // default row height, default is 28\n    rowHeight?: number | ((id: string) => number);\n    // min row height, default is 20\n    minRowHeight?: number;\n    // can a row height be adjusted by dragging\n    rowResizable?: boolean | ((id: string) => boolean);\n    // providing a CSS style for the rows.\n    rowStyle?: JSXInternal.CSSProperties;\n    // callback version of property rowStyle to set style for each row individually.\n    // function should return an object of CSS values.\n    getRowStyle?: (params: RowParams) => JSXInternal.CSSProperties;\n    // CSS class(es) for all rows. provide an array of strings (array of class names).\n    rowClass?: string[];\n    // callback version of property rowClass to set class(es) for each row individually.\n    // function should return an array of strings (array of class names).\n    getRowClass?: (params: RowParams) => string[];\n    // virtual grid overscan\n    overscanRowCount?: number; // default is 5\n    overscanColumnCount?: number; // default is 2\n    // virtual grid scroll \n    scrollThrottleRate?: number; // 100 (ms)\n    // whether to enable the grid drop-down to fill data, 'x' | 'y' | 'xy' | undefined\n    fillable?: Fillable;\n    // callback called when a cell is right clicked.\n    getContextMenuItems?: (params: GetContextMenuItemsParams) => MenuItem[];\n}\n")),(0,o.kt)("h2",{id:"\u5217\u5b9a\u4e49"},"\u5217\u5b9a\u4e49"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export type ColumnDef = (ColumnGroupOptions | ColumnOptions);\nexport type ColumnsDef = ColumnDef[];\n")),(0,o.kt)("h2",{id:"\u5217\u5206\u7ec4\u9009\u9879"},"\u5217\u5206\u7ec4\u9009\u9879"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// definition of column grouping \nexport interface ColumnGroupOptions {\n    // group id\n    id?: string;\n    // group name\n    headerName?: string;\n    // this is a padding\n    isPadding?: boolean;\n    // whether column grouping is collapsed by default, default is false\n    collapsed?: boolean;\n    // whether the column group can be collapsed, default is false\n    collapsible?: boolean;\n    // a subset of groups, can be multiple groups or columns\n    children: (ColumnGroupOptions | ColumnOptions)[];\n}\n")),(0,o.kt)("h2",{id:"\u5217\u9009\u9879"},"\u5217\u9009\u9879"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// for column options overridden by columnOptionsSelector\nexport interface OverridableColumnOptions {\n    // when a cell is read-only, the cellEditor will be invalid,\n    // and the value of the cell cannot be modified even if the drop-down fill is\n    readonly?: boolean;\n    // set to true to allow column dragging.\n    sortable?: boolean;\n    // format the reading and writing of cell data\n    transformer?: CellTransformer;\n    // cellRenderer to use for this column\n    cellRender?: ICellRenderer;\n    // cellEditor to use for this column\n    cellEditor?: ICellEditor;\n    // params to be passed to cell renderer and cell editor component\n    cellParams?: any;\n    // an object of css values for a particular cell.\n    cellStyle?: JSXInternal.CSSProperties;\n    // callback version of property cellStyle to set style for a particular cell.\n    // function should return an object of CSS values.\n    getCellStyle?: (params: CellParams) => JSXInternal.CSSProperties;\n    // class to use for the cell. can be an array of strings.\n    cellClass?: string[];\n    // callback version of property cellClass to set class(es) for a particular cell.\n    // function should return an array of strings (array of class names).\n    getCellClass?: (params: CellParams) => string[];\n    // an object of css values for a particular column title.\n    headerStyle?: JSXInternal.CSSProperties;\n    // callback version of property headerStyle to set style for a particular column title.\n    // function should return an object of CSS values.\n    getHeaderStyle?: (params: ColumnParams) => JSXInternal.CSSProperties;\n    // class to use for the column title. can be an array of strings.\n    headerClass?: string[];\n    // function should return an array of strings (array of class names).\n    getHeaderClass?: (params: ColumnParams) => string[];\n}\n\n// BaseColumnOptions can be overridden by default column options\nexport interface BaseColumnOptions extends OverridableColumnOptions {\n    // column width, default is 200\n    width?: number;\n    // the minimum width supported when adjusting the column width, default is 100\n    minWidth?: number;\n    // use flex layout, let the column fill the remaining space by default\n    flex?: number;\n    // can the column width be adjusted by dragging\n    resizable?: boolean;\n    // whether the column is visible, default is true\n    visible?: boolean;\n    // 'left' | 'right' | undefined\n    pinned?: Pinned;\n    // set to true (or return true from function) to allow row dragging.\n    rowDragable?: boolean | ((param: CellParams) => boolean);\n    // columnOptionsSelector is a callback to apply different options to the same column of cells in different rows\n    columnOptionsSelector?: (params: ColumnSelectorParams) => OverridableColumnOptions;\n}\n\n// column definition\nexport interface ColumnOptions extends BaseColumnOptions {\n    // column id\n    field: string;\n    // column name\n    headerName?: string;\n}\n")),(0,o.kt)("h2",{id:"rowdata"},"RowData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface RowData {\n    // row id\n    id: string;\n    [key: string]: any;\n}\n")),(0,o.kt)("h2",{id:"getcolumnmenuitemsparams"},"GetColumnMenuItemsParams"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface GetColumnMenuItemsParams {\n    // the column that was clicked\n    column: string;\n    grid: Grid;\n}\n")),(0,o.kt)("h2",{id:"getcontextmenuitemsparams"},"GetContextMenuItemsParams"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface GetContextMenuItemsParams {\n    // the column that was clicked\n    column: string;\n    // the row that was clicked\n    row: string;\n    grid: Grid;\n}\n")),(0,o.kt)("h2",{id:"menuitem"},"MenuItem"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface MenuItem {\n    // is it a dividing line\n    separator?: boolean;\n    // disabled menu items\n    disabled?: boolean;\n    // display name\n    name?: string;\n    // icon\n    icon?: string;\n    // callback after the menu item is clicked\n    action?: () => void;\n    subMenus?: MenuItem[];\n}\n")))}m.isMDXComponent=!0}}]);